[OCI_LB_RUN_ONCE]
action.email.useNSSubject = 1
alert.track = 0
description = Run this search once after you enable any OCI streaming input. This is important if there is data older than 15 minutes, however, regular population scripts should keep the lookup current when new entries arise
workload_pool = undefined
search = earliest=1 `oci_index` type=com.oraclecloud.loadbalancer.access `oci_trim` \
| stats count by backendAddr compartment_shortname compartmentid host oci_source source tenant_shortname tenantid type type_facility type_source \
| fields - count \
| outputlookup oci_lbs.csv

[OCI_LB_Continuous_Population]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 2,17,32,47 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
description = Scheduled search to populate new discovered services in dashboard dropdown menus
enableSched = 1
search = `oci_index` type=com.oraclecloud.loadbalancer.access `oci_trim`\
    | search NOT ( \
    [| inputlookup oci_lbs.csv \
    | return 10000 tenantid oci_source backendAddr host])\
| stats count by tenantid tenant_shortname compartmentid compartment_shortname source oci_source backendAddr host type type_source type_facility \
| fields - count \
| outputlookup oci_lbs.csv append=true
workload_pool = undefined

[OCI_SERVICES_RUN_ONCE]
action.email.useNSSubject = 1
alert.track = 0
description = Run this search once after you enable any OCI streaming input
search = `oci_index` earliest=1 `oci_trim` \
| fillnull value="NA" compartmentName \
| stats count by tenantid tenant_shortname type type_shortname compartmentid compartment_shortname compartmentName type_source type_facility \
| fields - count \
| outputlookup oci_services.csv
workload_pool = undefined

[OCI_SERVICES_Continuous_Population]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 4,19,34,48 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
description = Scheduled search to populate new discovered services in dashboard dropdown menus
enableSched = 1
search = `oci_index` type=* \
    NOT ( \
    [| inputlookup oci_services.csv \
    | return 10000 type]) \
    `oci_trim` \
    | fillnull value="NA" compartmentName \
| stats count by tenantid tenant_shortname type type_shortname compartmentid compartment_shortname compartmentName type_source type_facility \
| fields - count\
| outputlookup oci_services.csv append=true
workload_pool = undefined

[OCI_VCN_IDs_RUN_ONCE]
action.email.useNSSubject = 1
alert.track = 0
description = Run this search once after you process VCN Flow logs to build an initial list of IDs
search = `oci_index` type="com.oraclecloud.vcn.flowlogs.dataevent" earliest=1 \
    `oci_trim` \
| stats count by tenantid compartmentid vnicocid vnicsubnetocid ocid_shortname subnet_shortname tenant_shortname compartment_shortname realm region\
| fields - count\
| outputlookup oci_vcn_ids.csv

[OCI_VCN_IDs_Continuous_Population]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 3,18,33,48 * * * *
description = Create and continuously append the VCN ID files with new entries. Default schedule is every 60
enableSched = 1
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
search = `oci_index` type="com.oraclecloud.vcn.flowlogs.DataEvent" \
    NOT ( \
    [| inputlookup oci_vcn_ids.csv \
    | eval oracle.vnicocid=vnicocid \
    | return 10000 oracle.vnicocid]) \
`oci_trim` \
| stats count by tenantid compartmentid vnicocid vnicsubnetocid ocid_shortname subnet_shortname tenant_shortname compartment_shortname realm region\
| fields - count\
| outputlookup oci_vcn_ids.csv append=true

[oci_vcn_summary_destProtocol_populate]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = vcn_flow_summary
alert.track = 0
cron_schedule = 2,17,32,47 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
enableSched = 1
realtime_schedule = 0
search = `oci_vcn_logs` \
| rename data.* as *, oracle.* as * \
| fields bytesOut packets vnicocid protocolName dest_port action vnicocid tenantid compartmentid vnicsubnetocid\
| lookup well_known_ports port as dest_port \
| eval port=if(dest_port<=10000,dest_port,port), name=if(dest_port<=10000,name,"Ports>10000") \
| rename port as dest_port, protocolName as Transport \
| fillnull value="Others" dest_port \
| stats sum(bytesOut) as bytes sum(packets) as packets by tenantid compartmentid vnicsubnetocid vnicocid Transport name dest_port action \
| eventstats sum(packets) as total_packets sum(bytesOut) as total_bytes by tenantid compartmentid vnicsubnetocid vnicocid protocol action \
| collect `oci_vcn_summary` source="dest_port"

[oci_vcn_summary_destAddress_populate]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = vcn_flow_summary
alert.track = 0
cron_schedule = 2,17,32,47 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
display.general.timeRangePicker.show = 0
enableSched = 1
realtime_schedule = 0
search = `oci_vcn_logs` \
| rename data.* as *, oracle.* as * \
| fields bytesOut packets tenantid compartmentid vnicsubnetocid vnicocid destinationAddress protocolName action\
| stats sum(bytesOut) as bytesOut sum(packets) as packets by tenantid compartmentid vnicsubnetocid vnicocid destinationAddress protocolName action \
| summaryindex `oci_vcn_summary` source="destAddress"

[oci_vcn_summary_sourceAddress_populate]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = vcn_flow_summary
alert.track = 0
cron_schedule = 3,18,33,48 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
display.general.timeRangePicker.show = 0
enableSched = 1
realtime_schedule = 0
search = `oci_vcn_logs` \
| rename data.* as *, oracle.* as * \
| fields bytesOut packets tenantid compartmentid vnicsubnetocid vnicocid sourceAddress protocolName action vnicocid \
| stats sum(bytesOut) as bytesOut sum(packets) as packets by tenantid compartmentid vnicsubnetocid vnicocid sourceAddress protocolName action \
| sort 10000 -packets \
| iplocation sourceAddress \
| summaryindex `oci_vcn_summary` source="srcAddress"

[OCI_VCN_BACKFILL_DESTADDRESS_USE_WITH_CAUTION]
realtime_schedule = 0
search = `oci_vcn_logs` \
| rename data.* as *, oracle.* as * \
| fields _time bytesOut packets tenantid compartmentid vnicsubnetocid vnicocid destinationAddress protocolName action \
| stats sum(bytesOut) as bytesOut sum(packets) as packets by _time tenantid compartmentid vnicsubnetocid vnicocid destinationAddress protocolName action \
| summaryindex `oci_vcn_summary` source="destAddress"

[OCI_VCN_BACKFILL_SOURCEADDRESS_USE_WITH_CAUTION]
realtime_schedule = 0
search = `oci_vcn_logs` \
| rename data.* as *, oracle.* as * \
| fields _time bytesOut packets tenantid compartmentid vnicsubnetocid vnicocid sourceAddress protocolName action vnicocid \
| stats sum(bytesOut) as bytesOut sum(packets) as packets by _time tenantid compartmentid vnicsubnetocid vnicocid sourceAddress protocolName action \
| sort 0 -packets \
| iplocation sourceAddress \
| summaryindex `oci_vcn_summary` source="srcAddress"

[OCI_VCN_BACKFILL_PROTOCOL_USE_WITH_CAUTION]
realtime_schedule = 0
search = `oci_vcn_logs` \
| rename data.* as *, oracle.* as * \
| fields _time bytesOut packets vnicocid protocolName dest_port action vnicocid tenantid compartmentid vnicsubnetocid\
| lookup well_known_ports port as dest_port \
| eval port=if(dest_port<=10000,dest_port,port), name=if(dest_port<=10000,name,"Ports>10000") \
| rename port as dest_port, protocolName as Transport \
| fillnull value="Others" dest_port \
| stats sum(bytesOut) as bytes sum(packets) as packets by _time tenantid compartmentid vnicsubnetocid vnicocid Transport name dest_port action \
| eventstats sum(packets) as total_packets sum(bytesOut) as total_bytes by _time tenantid compartmentid vnicsubnetocid vnicocid protocol action \
| collect `oci_vcn_summary` source="dest_port"
